name: Build

on:
  pull_request:
    branches: [main]

jobs:
  # test:
  #   runs-on: ubuntu-latest

  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - uses: actions/checkout@v3
  #     - name: Use Node.js ${{ matrix.node-version }}
  #       uses: actions/setup-node@v3
  #       with:
  #         node-version: ${{ matrix.node-version }}

  #     - name: Install dependencies in shared package
  #       run: yarn install
  #       working-directory: packages/shared

  #     - name: Build shared package
  #       run: yarn build
  #       working-directory: packages/shared

  #     - name: Install dependencies of all packages
  #       run: yarn install

  #     - name: Build all packages
  #       run: yarn workspaces run build

  #     - name: Test all packages
  #       run: yarn workspaces run test

  # build:
  #   runs-on: ubuntu-latest
  #   needs: test

  #   strategy:
  #     matrix:
  #       node-version: [18.x]

  #   steps:
  #     - name: Login to GAR
  #       id: auth
  #       uses: docker/login-action@v3
  #       with:
  #         registry: europe-west4-docker.pkg.dev
  #         username: _json_key
  #         password: ${{ secrets.GAR_SA_KEY }}

  #     - id: docker-push-web-tagged
  #       name: Tag textifai/web image and push to GAR
  #       uses: docker/build-push-action@v5
  #       with:
  #         file: packages/web/Dockerfile
  #         push: true
  #         build-args: |
  #           FIREBASE_APIKEY=${{ secrets.FIREBASE_APIKEY }}
  #           FIREBASE_AUTHDOMAIN=${{ secrets.FIREBASE_AUTHDOMAIN }}
  #           FIREBASE_PROJECTID=${{ secrets.FIREBASE_PROJECTID }}
  #           FIREBASE_STORAGEBUCKET=${{ secrets.FIREBASE_STORAGEBUCKET }}
  #           FIREBASE_MESSAGINGSENDERID=${{ secrets.FIREBASE_MESSAGINGSENDERID }}
  #           FIREBASE_APPID=${{ secrets.FIREBASE_APPID }}
  #         tags: |
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-web:${{ github.sha }}
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-web:latest

  #     - id: docker-push-documents-tagged
  #       name: Tag textifai/documents image and push to GAR
  #       uses: docker/build-push-action@v5
  #       with:
  #         file: packages/documents/Dockerfile
  #         push: true
  #         build-args: |
  #           OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
  #           PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
  #           PINECONE_ENV=${{ secrets.PINECONE_ENV }}
  #           PINECONE_INDEX=${{ secrets.PINECONE_INDEX }}
  #         tags: |
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-documents:${{ github.sha }}
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-documents:latest

  #     - id: docker-push-chat-tagged
  #       name: Tag textifai/chat image and push to GAR
  #       uses: docker/build-push-action@v5
  #       with:
  #         file: packages/chat/Dockerfile
  #         push: true
  #         build-args: |
  #           OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
  #           PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
  #           PINECONE_ENV=${{ secrets.PINECONE_ENV }}
  #           PINECONE_INDEX=${{ secrets.PINECONE_INDEX }}
  #         tags: |
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-chat:${{ github.sha }}
  #           europe-west4-docker.pkg.dev/textifai-g5njdml004/textifai-registry/textifai-chat:latest

  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    # needs: build
    permissions:
      contents: read
      pull-requests: write
    env:
      TF_CLOUD_ORGANIZATION: "textifai"
      TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
      TF_WORKSPACE: "textifai"
      CONFIG_DIRECTORY: "./infrastructure"
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform variables
        id: set_vars
        # run: echo "TF_VAR_image_tag=$(echo $GITHUB_SHA)" >> $GITHUB_ENV
        run: echo "TF_VAR_image_tag=12345" >> $GITHUB_ENV

      - name: Setup Terraform variables
        working-directory: ${{ env.CONFIG_DIRECTORY }}
        id: echo_vars
        run: echo $TF_VAR_image_tag

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.4
        id: plan-upload
        with:
          directory: ./
          workspace: ${{ env.TF_WORKSPACE }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.4
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.4
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });
